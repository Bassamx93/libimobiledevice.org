name: Build and Deploy

on:
  push:
    branches:
      - master
    paths:
      - 'Makefile'
      - 'assets/**'
      - 'content/**'
      - 'data/*.json'
      - 'layouts/**'
      - 'config.*.yml'
      - 'composer.json'
      - 'package.json'
      - '.github/workflows/build-deploy.yml'

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Get composer cache directory
        id: composer-cache
        run: |
          echo "cache_dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer downloads 💾
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.cache_dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.*') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Cache PHP dependencies 💾
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.*') }}

      - name: Setup PHP with intl 🏗
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: intl-69.1

      - name: Install additional packages 🏗
        shell: bash
        run: |
          sudo apt-get -y update
          sudo apt-get -y install doxygen

      - name: Install composer dependencies 🏗
        shell: bash
        run: |
          composer install

      - name: Install node dependencies 🏗
        shell: bash
        run: |
          npm install

      - name: Get libimobiledevice releases
        uses: yakubique/github-releases@v1.2
        id: get_releases_libimobiledevice
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repository: libimobiledevice/libimobiledevice

      - name: Write release tags for libimobiledevice
        shell: bash
        run: |
          mkdir -p data/github/libimobiledevice/libimobiledevice
          echo '${{ steps.get_releases_libimobiledevice.outputs.releases }}' > data/github/libimobiledevice/libimobiledevice/tags.json

      - name: Get libplist releases
        uses: yakubique/github-releases@v1.2
        id: get_releases_libplist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repository: libimobiledevice/libplist

      - name: Write release tags for libplist
        shell: bash
        run: |
          mkdir -p data/github/libimobiledevice/libplist
          echo '${{ steps.get_releases_libplist.outputs.releases }}' > data/github/libimobiledevice/libplist/tags.json

      - name: Build 🔧
        shell: bash
        run: |
          make production

      - name: Build libimobiledevice documentation
        shell: bash
        run: |
          PACKAGE=libimobiledevice
          CURDIR=`pwd`
          curl -o $PACKAGE-master.zip -Ls https://github.com/libimobiledevice/$PACKAGE/archive/refs/heads/master.zip
          unzip $PACKAGE-master.zip
          for I in `echo '${{ steps.get_releases_libimobiledevice.outputs.releases }}' |jq -r '.[]'`; do
            echo Downloading https://github.com/libimobiledevice/$PACKAGE/releases/download/$I/$PACKAGE-$I.tar.bz2
            RES=`curl -L -s -o /dev/null -I -w "%{http_code}" https://github.com/libimobiledevice/$PACKAGE/releases/download/$I/$PACKAGE-$I.tar.bz2`
            if test "$RES" = "200"; then
              curl -o $PACKAGE-$I.tar.bz2 -Ls https://github.com/libimobiledevice/$PACKAGE/releases/download/$I/$PACKAGE-$I.tar.bz2
              tar xjf $PACKAGE-$I.tar.bz2
            else
              curl -o $PACKAGE-$I.tar.gz -Ls https://github.com/libimobiledevice/$PACKAGE/archive/refs/tags/$I.tar.gz
              tar xzf $PACKAGE-$I.tar.gz
            fi
            cd $PACKAGE-$I
            sed -e s/@PACKAGE@/$PACKAGE/g -e s/@VERSION@/$I/g < ../$PACKAGE-master/doxygen.cfg.in > doxygen.cfg
            if ! test -d docs/doxygen; then
              cp -r ../$PACKAGE-master/docs/doxygen docs/
            fi
            echo "Building docs for $PACKAGE-$I..."
            doxygen doxygen.cfg
            cd $CURDIR
            mkdir -p public/docs/$PACKAGE/$I
            cp -r $PACKAGE-$I/docs/html/* public/docs/$PACKAGE/$I/
          done
          ln -s $I public/docs/$PACKAGE/latest

      - name: Build libplist documentation
        shell: bash
        run: |
          PACKAGE=libplist
          CURDIR=`pwd`
          curl -o $PACKAGE-master.zip -Ls https://github.com/libimobiledevice/$PACKAGE/archive/refs/heads/master.zip
          unzip $PACKAGE-master.zip
          for I in `echo '${{ steps.get_releases_libplist.outputs.releases }}' |jq -r '.[]'`; do
            echo Downloading https://github.com/libimobiledevice/$PACKAGE/releases/download/$I/$PACKAGE-$I.tar.bz2
            RES=`curl -L -s -o /dev/null -I -w "%{http_code}" https://github.com/libimobiledevice/$PACKAGE/releases/download/$I/$PACKAGE-$I.tar.bz2`
            if test "$RES" = "200"; then
              curl -o $PACKAGE-$I.tar.bz2 -Ls https://github.com/libimobiledevice/$PACKAGE/releases/download/$I/$PACKAGE-$I.tar.bz2
              tar xjf $PACKAGE-$I.tar.bz2
            else
              curl -o $PACKAGE-$I.tar.gz -Ls https://github.com/libimobiledevice/$PACKAGE/archive/refs/tags/$I.tar.gz
              tar xzf $PACKAGE-$I.tar.gz
            fi
            cd $PACKAGE-$I
            sed -e s/@PACKAGE@/$PACKAGE/g -e s/@VERSION@/$I/g < ../$PACKAGE-master/doxygen.cfg.in > doxygen.cfg
            if ! test -d docs/doxygen; then
              cp -r ../$PACKAGE-master/docs/doxygen docs/
            fi
            awk '/\#\# Table of Contents/{while(getline && $$0 != ""){}{print "[TOC]"}}1' README.md > docs/README.doxygen.md
            echo "Building docs for $PACKAGE-$I..."
            doxygen doxygen.cfg
            cd $CURDIR
            mkdir -p public/docs/$PACKAGE/$I
            cp -r $PACKAGE-$I/docs/html/* public/docs/$PACKAGE/$I/
          done
          ln -s $I public/docs/$PACKAGE/latest

      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@4.1.3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_CONFIG_NAME: github-actions[bot]
          GIT_CONFIG_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          BRANCH: gh-pages
          FOLDER: public
          CLEAN: true
